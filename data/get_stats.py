"""
Printing out the number/proportion of samples per class for specified dataset and split.
This script will work for all datasets with text files generated by generate_txt.py.
"""

import os
import argparse
from pathlib import Path
from collections import Counter


def print_latex(value_dict):
    domains = sorted(value_dict.keys())
    for d in domains:
        line = d + ' & ' + ' & '.join(map(str, value_dict[d])) + '\\\\'
        print(line)


parser = argparse.ArgumentParser()

parser.add_argument('--dataset', default='office_home', type=str)
parser.add_argument('--txt_dir', default='txt', type=str)
parser.add_argument('--split', default='train', type=str, choices=['train', 'val', 'test'])
parser.add_argument('--value', default='pct', type=str, choices=['count', 'pct'])

args = parser.parse_args()

if __name__ == "__main__":

    if args.dataset == 'office_home':
        domains = ['Art', 'Clipart', 'Product', 'Real']
        num_class = 65
    elif args.dataset == 'domain_net':
        domains = ['clipart', 'painting', 'real', 'sketch']
        num_class = 126

    cwd = Path.cwd()
    data_dir = os.path.join(cwd, args.txt_dir, args.dataset)
    value_dict = {d: [] for d in domains}
    for d in domains:
        file_name = f'{args.split}_{d}.txt'
        file_path = os.path.join(data_dir, file_name)
        with open(file_path) as f:
            lines = f.readlines()
        lines_class = [int(line.split(' ')[1]) for line in lines]
        class_count = Counter(lines_class)
        if args.value == 'count':
            value_dict[d] = [class_count[i] for i in range(num_class)]
            value_dict[d] += [sum(value_dict[d])]
        else:
            value_dict[d] = [round(100 * class_count[i] / len(lines_class), 2) for i in range(num_class)]
            value_dict[d] += [round(sum(value_dict[d]), 2)]

    print_latex(value_dict)
